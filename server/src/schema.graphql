type Query {
  user: User
  getList(id: ID!): List
  getLists: [List!]!
  getMemberLists: [List!]!
}

type Mutation {
  signup(nick: String!, name: String!, password: String!, avatar: String!): AuthPayload
  login(nick: String!, password: String!): AuthPayload

  editUser(name: String, avatar: String): User
  inviteUser(nick: String!, listId: ID!): User
  refuseUser(nick: String!, listId: ID!): User

  createList(name: String!): List
  deleteList(id: ID!): List

  createItem(name: String!, count: String, priority: Priority!, listId: String!, members: [String!]): Item
  deleteItem(id: ID!): Item
  editItem(id: ID!, name: String, count: String, priority: Priority, members: [String!]): Item
}

type AuthPayload {
  user: User
  token: String
}

type User {
  id: ID!
  nick: String!
  name: String!
  avatar: String!
  lists: [List!]!
  memberLists: [List!]!
}

type List {
  id: ID!
  name: String!
  createdBy: User!
  items: [Item!]!
  members: [User!]!
}

type Item {
  id: ID!
  name: String!
  count: String
  priority: Priority!
  list: List!
  members: [User!]!
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

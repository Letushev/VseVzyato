// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  item: (where?: ItemWhereInput) => Promise<boolean>;
  list: (where?: ListWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  list: (where: ListWhereUniqueInput) => ListNullablePromise;
  lists: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<List>;
  listsConnection: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ListConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createList: (data: ListCreateInput) => ListPromise;
  updateList: (args: {
    data: ListUpdateInput;
    where: ListWhereUniqueInput;
  }) => ListPromise;
  updateManyLists: (args: {
    data: ListUpdateManyMutationInput;
    where?: ListWhereInput;
  }) => BatchPayloadPromise;
  upsertList: (args: {
    where: ListWhereUniqueInput;
    create: ListCreateInput;
    update: ListUpdateInput;
  }) => ListPromise;
  deleteList: (where: ListWhereUniqueInput) => ListPromise;
  deleteManyLists: (where?: ListWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  list: (
    where?: ListSubscriptionWhereInput
  ) => ListSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ListOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nick_ASC"
  | "nick_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "password_ASC"
  | "password_DESC";

export type Priority = "LOW" | "MEDIUM" | "HIGH";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "count_ASC"
  | "count_DESC"
  | "priority_ASC"
  | "priority_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ListUpdateManyWithoutMembersInput {
  create?: Maybe<
    ListCreateWithoutMembersInput[] | ListCreateWithoutMembersInput
  >;
  delete?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  set?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  disconnect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  update?: Maybe<
    | ListUpdateWithWhereUniqueWithoutMembersInput[]
    | ListUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | ListUpsertWithWhereUniqueWithoutMembersInput[]
    | ListUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  updateMany?: Maybe<
    ListUpdateManyWithWhereNestedInput[] | ListUpdateManyWithWhereNestedInput
  >;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ItemUpdateWithWhereUniqueWithoutListInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutListDataInput;
}

export interface ListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  items_every?: Maybe<ItemWhereInput>;
  items_some?: Maybe<ItemWhereInput>;
  items_none?: Maybe<ItemWhereInput>;
  AND?: Maybe<ListWhereInput[] | ListWhereInput>;
  OR?: Maybe<ListWhereInput[] | ListWhereInput>;
  NOT?: Maybe<ListWhereInput[] | ListWhereInput>;
}

export interface ItemUpdateWithoutListDataInput {
  name?: Maybe<String>;
  count?: Maybe<String>;
  priority?: Maybe<Priority>;
  members?: Maybe<UserUpdateManyInput>;
}

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  count?: Maybe<String>;
  count_not?: Maybe<String>;
  count_in?: Maybe<String[] | String>;
  count_not_in?: Maybe<String[] | String>;
  count_lt?: Maybe<String>;
  count_lte?: Maybe<String>;
  count_gt?: Maybe<String>;
  count_gte?: Maybe<String>;
  count_contains?: Maybe<String>;
  count_not_contains?: Maybe<String>;
  count_starts_with?: Maybe<String>;
  count_not_starts_with?: Maybe<String>;
  count_ends_with?: Maybe<String>;
  count_not_ends_with?: Maybe<String>;
  priority?: Maybe<Priority>;
  priority_not?: Maybe<Priority>;
  priority_in?: Maybe<Priority[] | Priority>;
  priority_not_in?: Maybe<Priority[] | Priority>;
  list?: Maybe<ListWhereInput>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface UserCreateWithoutMemberListsInput {
  id?: Maybe<ID_Input>;
  nick: String;
  name: String;
  avatar: String;
  password: String;
  lists?: Maybe<ListCreateManyWithoutCreatedByInput>;
}

export interface ItemUpsertWithWhereUniqueWithoutListInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutListDataInput;
  create: ItemCreateWithoutListInput;
}

export interface ItemUpdateInput {
  name?: Maybe<String>;
  count?: Maybe<String>;
  priority?: Maybe<Priority>;
  list?: Maybe<ListUpdateOneRequiredWithoutItemsInput>;
  members?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ListUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<ListCreateWithoutItemsInput>;
  update?: Maybe<ListUpdateWithoutItemsDataInput>;
  upsert?: Maybe<ListUpsertWithoutItemsInput>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface ListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ListWhereInput>;
  AND?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  OR?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  NOT?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
}

export interface ListUpdateWithoutItemsDataInput {
  name?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
  members?: Maybe<UserUpdateManyWithoutMemberListsInput>;
}

export interface UserUpdateManyMutationInput {
  nick?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutListsInput {
  create?: Maybe<UserCreateWithoutListsInput>;
  update?: Maybe<UserUpdateWithoutListsDataInput>;
  upsert?: Maybe<UserUpsertWithoutListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ListUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateWithoutListsDataInput {
  nick?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
  memberLists?: Maybe<ListUpdateManyWithoutMembersInput>;
}

export interface ListUpdateInput {
  name?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
  members?: Maybe<UserUpdateManyWithoutMemberListsInput>;
  items?: Maybe<ItemUpdateManyWithoutListInput>;
}

export interface ItemUpdateManyDataInput {
  name?: Maybe<String>;
  count?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ItemUpdateManyMutationInput {
  name?: Maybe<String>;
  count?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ListUpdateWithWhereUniqueWithoutMembersInput {
  where: ListWhereUniqueInput;
  data: ListUpdateWithoutMembersDataInput;
}

export interface ListUpsertWithoutItemsInput {
  update: ListUpdateWithoutItemsDataInput;
  create: ListCreateWithoutItemsInput;
}

export interface ListUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
  items?: Maybe<ItemUpdateManyWithoutListInput>;
}

export interface ListUpsertWithWhereUniqueWithoutMembersInput {
  where: ListWhereUniqueInput;
  update: ListUpdateWithoutMembersDataInput;
  create: ListCreateWithoutMembersInput;
}

export interface ItemUpdateManyWithoutListInput {
  create?: Maybe<ItemCreateWithoutListInput[] | ItemCreateWithoutListInput>;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueWithoutListInput[]
    | ItemUpdateWithWhereUniqueWithoutListInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueWithoutListInput[]
    | ItemUpsertWithWhereUniqueWithoutListInput
  >;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  count?: Maybe<String>;
  priority?: Maybe<Priority>;
  list: ListCreateOneWithoutItemsInput;
  members?: Maybe<UserCreateManyInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nick?: Maybe<String>;
  nick_not?: Maybe<String>;
  nick_in?: Maybe<String[] | String>;
  nick_not_in?: Maybe<String[] | String>;
  nick_lt?: Maybe<String>;
  nick_lte?: Maybe<String>;
  nick_gt?: Maybe<String>;
  nick_gte?: Maybe<String>;
  nick_contains?: Maybe<String>;
  nick_not_contains?: Maybe<String>;
  nick_starts_with?: Maybe<String>;
  nick_not_starts_with?: Maybe<String>;
  nick_ends_with?: Maybe<String>;
  nick_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  lists_every?: Maybe<ListWhereInput>;
  lists_some?: Maybe<ListWhereInput>;
  lists_none?: Maybe<ListWhereInput>;
  memberLists_every?: Maybe<ListWhereInput>;
  memberLists_some?: Maybe<ListWhereInput>;
  memberLists_none?: Maybe<ListWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ListCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  createdBy: UserCreateOneWithoutListsInput;
  members?: Maybe<UserCreateManyWithoutMemberListsInput>;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface UserCreateWithoutListsInput {
  id?: Maybe<ID_Input>;
  nick: String;
  name: String;
  avatar: String;
  password: String;
  memberLists?: Maybe<ListCreateManyWithoutMembersInput>;
}

export interface ItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  count?: Maybe<String>;
  count_not?: Maybe<String>;
  count_in?: Maybe<String[] | String>;
  count_not_in?: Maybe<String[] | String>;
  count_lt?: Maybe<String>;
  count_lte?: Maybe<String>;
  count_gt?: Maybe<String>;
  count_gte?: Maybe<String>;
  count_contains?: Maybe<String>;
  count_not_contains?: Maybe<String>;
  count_starts_with?: Maybe<String>;
  count_not_starts_with?: Maybe<String>;
  count_ends_with?: Maybe<String>;
  count_not_ends_with?: Maybe<String>;
  priority?: Maybe<Priority>;
  priority_not?: Maybe<Priority>;
  priority_in?: Maybe<Priority[] | Priority>;
  priority_not_in?: Maybe<Priority[] | Priority>;
  AND?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  OR?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  NOT?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
}

export interface ListCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  createdBy: UserCreateOneWithoutListsInput;
  items?: Maybe<ItemCreateManyWithoutListInput>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface ItemCreateWithoutListInput {
  id?: Maybe<ID_Input>;
  name: String;
  count?: Maybe<String>;
  priority?: Maybe<Priority>;
  members?: Maybe<UserCreateManyInput>;
}

export interface UserUpdateDataInput {
  nick?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
  lists?: Maybe<ListUpdateManyWithoutCreatedByInput>;
  memberLists?: Maybe<ListUpdateManyWithoutMembersInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  nick: String;
  name: String;
  avatar: String;
  password: String;
  lists?: Maybe<ListCreateManyWithoutCreatedByInput>;
  memberLists?: Maybe<ListCreateManyWithoutMembersInput>;
}

export interface ListUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    ListCreateWithoutCreatedByInput[] | ListCreateWithoutCreatedByInput
  >;
  delete?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  set?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  disconnect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  update?: Maybe<
    | ListUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ListUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ListUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ListUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  updateMany?: Maybe<
    ListUpdateManyWithWhereNestedInput[] | ListUpdateManyWithWhereNestedInput
  >;
}

export interface ListCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyWithoutMemberListsInput>;
  items?: Maybe<ItemCreateManyWithoutListInput>;
}

export interface ListUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ListWhereUniqueInput;
  data: ListUpdateWithoutCreatedByDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ListUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutMemberListsInput>;
  items?: Maybe<ItemUpdateManyWithoutListInput>;
}

export interface UserUpdateInput {
  nick?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
  lists?: Maybe<ListUpdateManyWithoutCreatedByInput>;
  memberLists?: Maybe<ListUpdateManyWithoutMembersInput>;
}

export interface UserUpdateManyWithoutMemberListsInput {
  create?: Maybe<
    UserCreateWithoutMemberListsInput[] | UserCreateWithoutMemberListsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutMemberListsInput[]
    | UserUpdateWithWhereUniqueWithoutMemberListsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutMemberListsInput[]
    | UserUpsertWithWhereUniqueWithoutMemberListsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ListCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  createdBy: UserCreateOneWithoutListsInput;
  members?: Maybe<UserCreateManyWithoutMemberListsInput>;
  items?: Maybe<ItemCreateManyWithoutListInput>;
}

export interface UserUpdateWithWhereUniqueWithoutMemberListsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMemberListsDataInput;
}

export interface UserUpsertWithoutListsInput {
  update: UserUpdateWithoutListsDataInput;
  create: UserCreateWithoutListsInput;
}

export interface UserUpdateWithoutMemberListsDataInput {
  nick?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
  lists?: Maybe<ListUpdateManyWithoutCreatedByInput>;
}

export interface ListCreateOneWithoutItemsInput {
  create?: Maybe<ListCreateWithoutItemsInput>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutMemberListsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMemberListsDataInput;
  create: UserCreateWithoutMemberListsInput;
}

export interface ListCreateManyWithoutMembersInput {
  create?: Maybe<
    ListCreateWithoutMembersInput[] | ListCreateWithoutMembersInput
  >;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nick?: Maybe<String>;
  nick_not?: Maybe<String>;
  nick_in?: Maybe<String[] | String>;
  nick_not_in?: Maybe<String[] | String>;
  nick_lt?: Maybe<String>;
  nick_lte?: Maybe<String>;
  nick_gt?: Maybe<String>;
  nick_gte?: Maybe<String>;
  nick_contains?: Maybe<String>;
  nick_not_contains?: Maybe<String>;
  nick_starts_with?: Maybe<String>;
  nick_not_starts_with?: Maybe<String>;
  nick_ends_with?: Maybe<String>;
  nick_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateManyWithoutMemberListsInput {
  create?: Maybe<
    UserCreateWithoutMemberListsInput[] | UserCreateWithoutMemberListsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateManyDataInput {
  nick?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export type ListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ListUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ListWhereUniqueInput;
  update: ListUpdateWithoutCreatedByDataInput;
  create: ListCreateWithoutCreatedByInput;
}

export interface ItemCreateManyWithoutListInput {
  create?: Maybe<ItemCreateWithoutListInput[] | ItemCreateWithoutListInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ListUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ListUpdateManyWithWhereNestedInput {
  where: ListScalarWhereInput;
  data: ListUpdateManyDataInput;
}

export interface ListScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  OR?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  NOT?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
}

export interface ListCreateManyWithoutCreatedByInput {
  create?: Maybe<
    ListCreateWithoutCreatedByInput[] | ListCreateWithoutCreatedByInput
  >;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
}

export interface UserCreateOneWithoutListsInput {
  create?: Maybe<UserCreateWithoutListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  nick?: Maybe<String>;
}>;

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  nick: String;
  name: String;
  avatar: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nick: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nick: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface List {
  id: ID_Output;
  name: String;
}

export interface ListPromise extends Promise<List>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListSubscription
  extends Promise<AsyncIterator<List>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListNullablePromise
  extends Promise<List | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  nick: String;
  name: String;
  avatar: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  nick: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
  lists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memberLists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nick: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  lists: <T = Promise<AsyncIterator<ListSubscription>>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memberLists: <T = Promise<AsyncIterator<ListSubscription>>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nick: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
  lists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memberLists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ListPreviousValuesPromise
  extends Promise<ListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ListPreviousValuesSubscription
  extends Promise<AsyncIterator<ListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Item {
  id: ID_Output;
  name: String;
  count?: String;
  priority: Priority;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  count: () => Promise<String>;
  priority: () => Promise<Priority>;
  list: <T = ListPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<Priority>>;
  list: <T = ListSubscription>() => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  count: () => Promise<String>;
  priority: () => Promise<Priority>;
  list: <T = ListPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListEdge {
  node: List;
  cursor: String;
}

export interface ListEdgePromise extends Promise<ListEdge>, Fragmentable {
  node: <T = ListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListEdgeSubscription
  extends Promise<AsyncIterator<ListEdge>>,
    Fragmentable {
  node: <T = ListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListSubscriptionPayload {
  mutation: MutationType;
  node: List;
  updatedFields: String[];
  previousValues: ListPreviousValues;
}

export interface ListSubscriptionPayloadPromise
  extends Promise<ListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListPreviousValuesPromise>() => T;
}

export interface ListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListPreviousValuesSubscription>() => T;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  name: String;
  count?: String;
  priority: Priority;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  count: () => Promise<String>;
  priority: () => Promise<Priority>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<Priority>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ListConnection {
  pageInfo: PageInfo;
  edges: ListEdge[];
}

export interface ListConnectionPromise
  extends Promise<ListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListEdge>>() => T;
  aggregate: <T = AggregateListPromise>() => T;
}

export interface ListConnectionSubscription
  extends Promise<AsyncIterator<ListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateList {
  count: Int;
}

export interface AggregateListPromise
  extends Promise<AggregateList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListSubscription
  extends Promise<AsyncIterator<AggregateList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "List",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Priority",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
